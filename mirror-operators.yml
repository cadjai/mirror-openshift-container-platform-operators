#!/usr/local/bin/ansible-playbook --inventory=inventory
- name: ' Konductor | Provision UPI Infra | mirror-operators.yml' 
  hosts: localhost 
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3
  vars_files:
    - 'vars/vault.yml'
    - 'vars/registry.yml'
  vars:
    module: "mirror-operators"
    ansible_name_module: " Konductor | Provision UPI Infra | {{ module }}"

  tasks:
    - name: '{{ ansible_name_module }} | podman:login | Login to quay container registry'
      no_log: true
      command: >
         podman login -u {{ default_operator_registry_username }} \
         -p {{ default_operator_registry_password }} \
         --authfile {{ hostvars[inventory_hostname].ansible_env.HOME }}/.docker/oprconfig.json \
          {{ default_operator_registry }}
      register: authfile_created

    - name: '{{ ansible_name_module }} | podman:login | Login to extra registry'
      no_log: true
      command: >
        podman login -u {{ default_operator_registry_username }} \
          -p {{ default_operator_registry_password }} \
          --authfile {{ hostvars[inventory_hostname].ansible_env.HOME }}/.docker/oprconfig.json \
          {{ item.value.image_registry }}
      with_dict:
        - "{{ operator_registries_to_mirror }}"
      when:
        - item.key is defined and item.key != ""
        - item.value.mirror is defined and item.value.mirror | bool
        - item.value.source is defined and item.value.source != ""
        - item.value.image_registry is defined and item.value.image_registry != ""

    - name: '{{ ansible_name_module }} | set_fact |  authfile for registry'
      set_fact:
        operator_registry_pull_secret_file: "{{ hostvars[inventory_hostname].ansible_env.HOME }}/.docker/oprconfig.json"

    - name: '{{ ansible_name_module }} | file:directory | Ensure the images staging directory exist'
      file:
        path: "{{ item }}"
        state: directory
        mode: 0755
      loop:
        - "{{ dir_bundle_staging }}"
        - "{{ registry_container_dir }}"

    - name: '{{ ansible_name_module }} | podman:run | Start registry container '
      command: podman run -d --name {{ registry_container_name }} \
        -p 5000:5000 -v {{ registry_container_dir }}:/var/lib/registry:z \
          {{ registry_container_image }}

    - name: '{{ ansible_name_module }} | copy | copy content template files to staging location '
      copy:
        src: files/{{ item }}
        dest: "{{ dir_bundle_staging }}/{{ item | basename }}"
        force: yes
        mode: 0644
      with_items:
        - known-bad-images
        - image-content-source-template 
        - catalog-source-template

    - name: '{{ ansible_name_module }} | shell:echo | create a line separated list of the items to mirror 1 of 2'
      shell: echo {{ item.value.mirrored_operator_list }} > {{ dir_bundle_staging }}/{{ item.key }}
      with_dict:
        - "{{ operator_registries_to_mirror }}"
      when:
        - item.key is defined and item.key != ""
        - item.value.mirror is defined and item.value.mirror | bool
        - item.value.source is defined and item.value.source != ""
        - item.value.mirrored_operator_list is defined and item.value.mirrored_operator_list != ""

    - name: '{{ ansible_name_module }} | shell:sed | create a line separated list of the items to mirror 2 of 2'
      shell: sed -i $'s/,/\\\n/g' {{ dir_bundle_staging }}/{{ item.key }}
      with_dict:
        - "{{ operator_registries_to_mirror }}"
      when:
        - item.key is defined and item.key != ""
        - item.value.mirror is defined and item.value.mirror | bool
        - item.value.source is defined and item.value.source != ""
        - item.value.mirrored_operator_list is defined and item.value.mirrored_operator_list != ""

    - name: '{{ ansible_name_module }} | file:directory | ensure ouput directory exits for each of indices being processed'
      file: 
        path: "{{ dir_bundle_staging }}/{{ item.key }}-publish"
        state: directory
        mode: 0755
      with_dict:
        - "{{ operator_registries_to_mirror }}"
      when:
        - item.key is defined and item.key != ""
        - item.value.mirror is defined and item.value.mirror | bool
        - item.value.source is defined and item.value.source != ""
        - item.value.mirrored_operator_list is defined and item.value.mirrored_operator_list != ""

    - name: Mirror operators using Arvin's python script
      become: yes
      script: >
        openshift-disconnected-operators/mirror-operator-catalogue.py \
          --catalog-version=1.0.0 --authfile={{ operator_registry_pull_secret_file }} \
          --registry-olm=localhost:5000 --registry-catalog=localhost:5000 --icsp-scope=namespace --run-dir={{ dir_bundle_staging }} \
          --operator-image-name={{ item.key }} --operator-catalog-image-url={{ item.value.source.split(':')[0] }}  \
          --output={{ dir_bundle_staging }}/{{ item.key }}-publish --operator-channel={{ item.value.source.split(':')[1] }} \
          --operator-file={{ dir_bundle_staging }}/{{ item.key }}
      args:
        executable: python3
      with_dict:
        - "{{ operator_registries_to_mirror }}"
      when:
        - item.key is defined and item.key != ""
        - item.value.mirror is defined and item.value.mirror | bool
        - item.value.source is defined and item.value.source != ""

    - name: '{{ ansible_name_module }} | block | copy manifest files to container storage location'
      when:
        - bundle is defined
        - bundle | bool
      block:
        - name: '{{ ansible_name_module }} | command: cp | copy manifest files '
          copy:
            src: "{{ dir_bundle_staging }}/{{ item.key }}-publish" 
            dest: "{{ registry_container_dir }}"
            force: yes
          with_dict:
            - "{{ operator_registries_to_mirror }}"
          when:
            - item.key is defined and item.key != ""
            - item.value.mirror is defined and item.value.mirror | bool
            - item.value.source is defined and item.value.source != ""

        - name: '{{ ansible_name_module }} | archive:xz | create operator image bundle '
          become: yes
          command: >
            tar -c --use-compress-program='pigz -9' -v \
              -f {{ dir_bundle_location }}/{{ bundle_file_name }} \
              -C {{ registry_container_dir }} .
          args:
            creates: "{{ dir_bundle_location }}/{{ bundle_file_name }}"
            warn: false
            chdir: "{{ registry_container_dir }}/"

