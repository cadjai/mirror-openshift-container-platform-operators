#!/usr/local/bin/ansible-playbook --inventory=inventory
- name: ' Konductor | Provision UPI Infra | push-operators-to-registry.yml' 
  hosts: localhost 
  become: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3
  vars_files:
    - 'vars/vault.yml'
    - 'vars/registry.yml'
  vars:
    module: "push-operators-to-registry"
    ansible_name_module: " Konductor | Provision UPI Infra | {{ module }}"

  pre_tasks:
    - name: '{{ ansible_name_module }} | check if oc client is available on controller if required'
      command: which oc
      ignore_errors: yes
      register: oc_client_check

    - name: Set OC Client Path in case it is not defined
      set_fact:
        oc_client: "{{ oc_client_check.stdout }}"
      when:
        - not oc_client is defined
        - oc_client_check is defined
        - oc_client_check.rc is defined
        - oc_client_check.rc == 0
        - oc_client_check.stdout is defined

  tasks:
    - name: '{{ ansible_name_module }} | block | unpack bundle to controller if required'
      when:
        - unpack_bundle is defined
        - unpack_bundle | bool
      block:
        - name: '{{ ansible_name_module }} | file:directory | Ensure the operator images staging directory exist'
          file:
            path: "{{ item }}"
            state: directory
            mode: 0755
          loop:
            - "{{ dir_bundle_staging }}"

        - name: '{{ ansible_name_module }} | unarchive:xz | original operator bundle on registry '
          unarchive:
            src: "{{ bundle_file_location }}"
            remote_src: yes
            dest: "{{ dir_bundle_staging }}"
            mode: 0755
          register: op_unbundle_out

    - name: '{{ ansible_name_module }} | command | generate authfile for registry'
      no_log: true
      command: >
        podman login -u {{ registry_admin_username }} -p {{ registry_admin_password }} \
           --authfile {{ hostvars[inventory_hostname].ansible_env.HOME }}/.docker/regconfig.json \
           {{ registry_host_fqdn }}
      register: reg_authfile_created

    - name: '{{ ansible_name_module }} | set_fact |  authfile for destination registry'
      set_fact:
        registry_auth_config: "{{ hostvars[inventory_hostname].ansible_env.HOME }}/.docker/regconfig.json"

    - name: Upload to registry using script from Alex Flom 
      become: yes
      script: >
        openshift-disconnected-operators-redhatgov/container/upload.sh \
          -a {{ registry_auth_config }} \
          -d {{ registry_host_fqdn }}/{{ operator_local_repository }} \
          -m {{ dir_bundle_staging }}/{{ item.key }}-publish/mapping.txt
      with_dict:
        - "{{ operators_to_mirror }}"
      when:
        - item.key is defined and item.key != ""
        - item.value.mirror is defined and item.value.mirror | bool
        - item.value.source is defined and item.value.source != ""
      register: operators_uploaded

    - name: Retreive custom index tag
      shell: >
        curl -v http://localhost:5000/v2/{{ mirrored_index_prefix }}{{ (item.value.source.split('/')[2]).split(':')[0] }}/tags/list | jq .tags[]
      args:
        warn: no
      with_dict:
        - "{{ operators_to_mirror }}"
      when:
        - item.key is defined and item.key != ""
        - item.value.mirror is defined and item.value.mirror | bool
        - item.value.source is defined and item.value.source != ""
      register: index_tags

    - name: Set custom index image name
      set_fact:
        custom_index_image_name: "{{ custom_index_image_name | default([]) + [mirrored_index_prefix + item.item.key + '-index:' + item.stdout | from_json] }}"
      loop: "{{ index_tags.results }}"
      when:
        - item.skipped is undefined
        - item.stdout is defined

    - name: Upload operator index to registry
      become: yes
      command: >
        {{ oc_client.stdout }} image mirror localhost:5000/{{ item }}  \
           {{ registry_host_fqdn }}/{{ operator_local_repository }}/{{ item }} \
           --keep-manifest-list=true \
           --insecure=true \
           -a {{ registry_auth_config }}
      loop: "{{ custom_index_image_name }}"
      when:
        - oc_client is defined
        - oc_client != ''
      register: operator_indices_uploaded

    - name: Upload operator index to registry
      become: yes
      command: >
        skopeo copy docker://localhost:5000/{{ item }}  \
           docker://{{ registry_host_fqdn }}/{{ operator_local_repository }}/{{ item }} \
           --tls-verify=false \
           --all \
           --authfile={{ registry_auth_config }}
      loop: "{{ custom_index_image_name }}"
      when:
        - not oc_client is defined or oc_client == ""
      register: operator_indices_uploaded

