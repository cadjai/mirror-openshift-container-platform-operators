---
- name:  '{{ ansible_name_module }} | Push container to temp container registry to be used as placeholder for later processing'
  when:
    - (use_manifest_file is defined and use_manifest_file | bool) or  (registry_host_fqdn is defined and "'localhost' in registry_host_fqdn")
  block:
    - name: '{{ ansible_name_module }} | podman:login | Login to extra registry'
      ansible.builtin.shell: >
        {{ podman_cli }} ps -a | grep  {{ registry_container_name }}  | awk '{print $NF}'
      ignore_errors: yes
      register: container_status

    - name: '{{ ansible_name_module }} | podman:run | Start registry container '
      ansible.builtin.command: >
        {{ podman_cli }}  run -d --name {{ registry_container_name }} \
          -p 5000:5000 -v {{ registry_container_dir }}:/var/lib/registry \
          {{ registry_container_image }}
      when:
        - container_status is defined
        - container_status.rc is defined
        - container_status.rc == 0
        - container_status.stdout is defined
        - container_status.stdout == '' or  not registry_container_name in container_status.stdout
      register: container_start_out

- name:  '{{ ansible_name_module }} | Push container straight to destination registry '
  when:
    - not use_manifest_file is defined or not use_manifest_file | bool
  block:
    - name: '{{ ansible_name_module }} | set_fact |  content_repo'
      ansible.builtin.set_fact:
        content_repo: "{{ operator_local_repository if (operator_local_repository is defined and operator_local_repository != '' and operator_content_type is defined and operator_content_type | bool) else local_repository if (local_repository is defined and local_repository != '' and (not operator_content_type is defined or not operator_content_type | bool)) else '' }}"

    - name: '{{ ansible_name_module }} | set_fact |  registry_content_repo_strg'
      ansible.builtin.set_fact:
        registry_content_repo_strg: "{{ registry_host_fqdn }}{{ ('/' + content_repo)  if content_repo != '' else content_repo }}"
      when:
        - registry_host_fqdn is defined
        - registry_host_fqdn != ''

    - name: '{{ ansible_name_module }} | Print registry content  repo string output'
      ansible.builtin.debug:
        var: registry_content_repo_strg
        verbosity: 2

    - name:  '{{ ansible_name_module }} | Push containers to registry'
      ansible.builtin.command: >
        {{ oc_mirror_cli }} --from {{ dir_bundle_location }}/{{ bundle_name | d('mirror_seq1_000000.tar', true) }}  docker://{{  registry_content_repo_strg | default('localhost:5000', true) }} -v5
      when:
        -  "not 'localhost' in registry_host_fqdn"
      register: images_pushed

    - name:  '{{ ansible_name_module }} | Push containers to registry'
      ansible.builtin.command: >
        {{ oc_mirror_cli }} --from {{ dir_bundle_location }}/{{ bundle_name | d('mirror_seq1_000000.tar', true) }}  docker://{{  registry_content_repo_strg | default('localhost:5000', true) }}  --dest-skip-tls --dest-use-http  -v5
      when:
        -  "'localhost' in registry_host_fqdn"
      register: images_pushed


- name:  '{{ ansible_name_module }} | Push container to temp container registry to be used as placeholder for later processing'
  when:
    - use_manifest_file is defined
    - use_manifest_file | bool
  block:
    - name:  '{{ ansible_name_module }} | Push container to temp container registry to be used as placeholder for later processing'
      ansible.builtin.command: >
        {{ oc_mirror_cli }} --from {{ dir_bundle_location }}/{{ bundle_name | d('mirror_seq1_000000.tar', true) }}  docker://localhost:5000 --dest-skip-tls --dest-use-http -v5
      register: images_pushed

    - name: '{{ ansible_name_module }} | set_fact |  manifest_result_folder'
      ansible.builtin.set_fact:
        image_mapping_file: "{{ manifests_dir }}/{{ reg_mapping_filename | d('mapping-registry.txt', true) }}"

    - name: '{{ ansible_name_module }} | Print Mapping File Path'
      ansible.builtin.debug:
        var: reg_mapping_filename
        verbosity: 2

    - name: '{{ ansible_name_module }} | Print Manifest File Path'
      ansible.builtin.debug:
        var: image_mapping_file
        verbosity: 2

    - name: '{{ ansible_name_module }} | Print Manifest Content'
      ansible.builtin.debug:
        var: item
        verbosity: 2
      loop: "{{ lookup('file', image_mapping_file).splitlines() }}"

    - name: Upload images to registry using images from manifests
      ansible.builtin.command: >
        skopeo copy --authfile={{ registry_auth_config }} --all \
           docker://localhost:5000/{{ (item.split('=')[0]).split('/')[1:]  | join('/') }} \
           docker://{{ registry_host_fqdn }}/{{ operator_local_repository }}/{{ ((item.split('=')[0]).split('/')[1:]  | join('/')).split('@sha256')[0] }} \
           --src-tls-verify=false --preserve-digests=true
      loop: "{{ lookup('file', image_mapping_file).splitlines() }}"
      register: operators_uploaded

    - name: Set custom index image destination repo prefix
      set_fact:
        dest_repo_prefix: "{{ registry_host_fqdn }}/{{ operator_local_repository }}"

    - name: Set custom index image name info object
      set_fact:
        catalog_index_data: "{{ catalog_index_data | d([], true) + [{'origin': item, 'src': 'localhost:5000/' + item.split('/')[1:] | join('/'), 'dest': dest_repo_prefix + '/' +  item.split('/')[1:-1]  | join('/') + '/' + (catalog_index_name | d((item.split('/')[-1]).split(':'), true)) + ':' + item.split(':')[1]}] }}"
      loop: "{{ cat_src_out.stdout_lines }}"
      when:
        - cat_src_out is defined
        - cat_src_out.stdout_lines is defined
        - cat_src_out.stdout_lines | length > 0

    - name: '{{ ansible_name_module }} | Print Custom index data'
      ansible.builtin.debug:
        var: item
        verbosity: 2
      loop: "{{ catalog_index_data }}"

    - name: Upload custom index images to registry
      ansible.builtin.command: >
        skopeo copy --authfile={{ registry_auth_config }} --all \
           docker://{{ item.src }} \
           docker://{{ item.dest }} \
           --src-tls-verify=false --preserve-digests=true
      loop: "{{ catalog_index_data }}"
      register: operators_indices_uploaded

    - name: '{{ ansible_name_module }} | podman:run | Stop registry container '
      ansible.builtin.command: >
        {{ podman_cli }}  rm -f  {{ registry_container_name }}
      when:
        - operators_indices_uploaded is defined
        - operators_indices_uploaded.changed is defined
        - operators_indices_uploaded.changed | bool

