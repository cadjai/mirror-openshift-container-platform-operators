#!/usr/local/bin/ansible-playbook --inventory=inventory
- name: ' Push Content to registry using oc-mirror | push-content-using-oc-mirror.yml'
  hosts: localhost
  vars:
    ansible_python_interpreter: /usr/bin/python3.6
    module: "push-content-to-registry"
    ansible_name_module: "Push content to registry | {{ module }}"

  vars_files:
    - 'vars/vault.yml'
    - 'vars/registry.yml'
  
  pre_tasks:
    - name: Ensure required oc-mirror binary is installed on host
      when:
        - not oc_mirror_cli is defined or oc_mirror_cli == ''
      block:
        - name: '{{ ansible_name_module }} | ansible.builtin.command:which | Check if oc-mirror is installed'
          ansible.builtin.shell: >
            which oc-mirror
          ignore_errors: yes
          register: ocmirror_binary

        - name: '{{ ansible_name_module }} | set_fact |  oc_mirror_cli'
          ansible.builtin.set_fact:
            oc_mirror_cli: "{{ ocmirror_binary.stdout }}"
          when:
            - ocmirror_binary is defined
            - ocmirror_binary.rc is defined
            - ocmirror_binary.rc == 0
            - ocmirror_binary.stdout is defined
            - ocmirror_binary.stdout != ''

    - name: '{{ ansible_name_module }} | ansible.builtin.command:which | Check if podman is installed'
      block:
        - name: '{{ ansible_name_module }} | ansible.builtin.command:which | Check if oc-mirror is installed'
          ansible.builtin.shell: >
            which podman
          ignore_errors: yes
          register: podman_binary

        - name: '{{ ansible_name_module }} | set_fact |  podman_cli'
          ansible.builtin.set_fact:
            podman_cli: "{{ podman_binary.stdout }}"
          when:
            - podman_binary is defined
            - podman_binary.rc is defined
            - podman_binary.rc == 0
            - podman_binary.stdout is defined
            - podman_binary.stdout != ''

  tasks:
    - name: '{{ ansible_name_module }} | file:directory | Ensure the images staging directory exist'
      become: yes
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: 0777
      loop:
        - "{{ registry_container_dir }}"
        - "{{ dir_bundle_location }}"

    - name: Set Selinux Context flag on Container Drectory  mount point
      become: yes
      sefcontext:
        target: "{{ registry_container_dir }}(/.*)?"
        setype: "{{ container_context_label | default('container_file_t', false) }}"
        state: present
      register: fcontext_set

    - name: Apply Fcontext set above
      become: yes
      ansible.builtin.command: restorecon -irv {{ registry_container_dir }}
      register: fcontext_applied

    - name: '{{ ansible_name_module }} | set_fact |  authfile for destination registry'
      ansible.builtin.set_fact:
        registry_auth_config: "{{ hostvars[inventory_hostname].ansible_env.HOME }}/.docker/config.json"

    - name: '{{ ansible_name_module }} | command | generate authfile for registry'
      no_log: true
      ansible.builtin.command: >
        podman login -u {{ registry_admin_username }} -p {{ registry_admin_password }} \
           --authfile {{ hostvars[inventory_hostname].ansible_env.HOME }}/.docker/config.json \
           {{ registry_host_fqdn }}
      register: reg_authfile_created

    - name: '{{ ansible_name_module }} | ansible.builtin.shell | Prcess content push using imageset  catalogs config files'
      include_tasks: tasks/process-content-push-using-oc-mirror.yml
      loop: "{{ imageset_config_files }}"
      vars:
        imageset_config_file: "{{ item }}"
        bundle_name: "{{ (item  | basename).split('.')[0] }}.tar"
      register: all_bundle_processed

    - name: '{{ ansible_name_module }} | Print Manifest extraction output'
      ansible.builtin.debug:
        var: all_bundle_processed.results
        verbosity: 2

    - name: '{{ ansible_name_module }} | ansible.builtin.shell | Generate manifests from imageset catalogs config files '
      include_tasks: tasks/retrieve-manifests-from-oc-mirror-bundle.yml
      loop: "{{ imageset_config_files }}"
      vars:
        imageset_config_file: "{{ item }}"
        bundle_name: "{{ (item  | basename).split('.')[0] }}.tar"
      register: all_bundle_manifest_processed

    - name: '{{ ansible_name_module }} | Print Manifest extraction output'
      ansible.builtin.debug:
        var: all_bundle_manifest_processed.results
        verbosity: 2

